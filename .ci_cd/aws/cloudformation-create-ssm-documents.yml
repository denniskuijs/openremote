# ---------------------------------------------------------------------------------------------------------------------
#
# CloudFormation Template for creating SSM Documents for attaching/detaching the EBS data volume.
#
# ---------------------------------------------------------------------------------------------------------------------

AWSTemplateFormatVersion: '2010-09-09'
Description: 'SSM documents for attaching/detaching the EBS data volume'
Resources:
  SSMUmountVolumeDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      DocumentFormat: YAML
      TargetType: /AWS::EC2::Instance
      Name: umount_volume
      Content:
        schemaVersion: '2.2'
        description: 'Script for umounting the EBS data volume'
        parameters:
          DeviceName:
            type: String
            description: EBS Device name where this volume is mounted on.
        mainSteps:
          - name: StopDocker
            action: aws:runShellScript
            inputs:
              runCommand:
                - systemctl stop docker.socket docker.service
          - name: RemoveFileSystemEntry
            action: aws:runShellScript
            inputs:
              runCommand: 
                - |
                  UUID=$(sudo blkid -o value -s UUID {{ DeviceName }})
                  if [ -n "$UUID" ]; then
                    cp /etc/fstab /etc/fstab.orig
                    sed -i '/UUID='$UUID'/d' /etc/fstab
                  else
                    echo "Failed to remove /etc/fstab entry. UUID is not found"
                    exit 1
                  fi
          - name: UmountVolume
            action: aws:runShellScript
            inputs:
              runCommand:
                - umount {{ DeviceName }}

  SSMDetachVolumeDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      DocumentFormat: YAML
      TargetType: /AWS::EC2::Instance
      Name: detach_volume
      Content:
        schemaVersion: '0.3'
        description: 'Script for detaching the EBS data volume'
        parameters:
          VolumeId:
            type: String
            description: 'Volume ID that needs to be detached.'
          InstanceId:
            type: String
            description: Instance ID where the script needs to be executed.
          DeviceName:
            type: String
            description: EBS Device name where this volume is mounted on.
        mainSteps:
          - name: UmountVolume
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: ssm
              Api: SendCommand
              DocumentName: umount_volume
              Parameters: 
                DeviceName: 
                  - '{{ DeviceName }}'
                InstanceIds:
                  - '{{ InstanceId }}'
              nextStep: DetachVolume
          - name: DetachVolume
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: ec2
              Api: DetachVolume
              VolumeId: '{{ VolumeId }}'
  
  SSMMountVolumeDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      DocumentFormat: YAML
      TargetType: /AWS::EC2::Instance
      Name: mount_volume
      Content:
        schemaVersion: '2.2'
        description: 'Script for mounting the EBS data volume'
        parameters:
          DeviceName:
            type: String
            description: EBS Device name where this volume is mounted on.
        mainSteps:
          - name: MountVolume
            action: aws:runShellScript
            inputs:
              runCommand:
                - |
                  FILESYSTEM=$(blkid -o value -s TYPE {{ DeviceName }})
                  if [ -z "$FILESYSTEM" ]; then
                    mkfs -t xfs {{ DeviceName }}
                    mount {{ DeviceName }} /var/lib/docker/volumes
                  else
                    mount {{ DeviceName }} /var/lib/docker/volumes
                  fi
          - name: AddFileSystemEntry
            action: aws:runShellScript
            inputs:
              runCommand:
                - |
                  UUID=$(blkid -o value -s UUID {{ DeviceName }})
                  if [ -n "$UUID" ]; then
                    cp /etc/fstab /etc/fstab.orig
                    echo "UUID=$UUID /var/lib/docker/volumes xfs defaults,nofail 0 2" >> /etc/fstab
                  else
                    echo "Failed to add /etc/fstab entry. UUID is not found"
                    exit 1
                  fi
          - name: StartDocker
            action: aws:runShellScript
            inputs:
              runCommand:
                - systemctl start docker.socket docker.service

  SSMAttachVolumeDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      DocumentFormat: YAML
      TargetType: /AWS::EC2::Instance
      Name: attach_volume
      Content:
        schemaVersion: '0.3'
        description: 'Script for attaching the EBS data volume'
        parameters:
          VolumeId:
            type: String
            description: 'Volume ID that needs to be detached.'
          InstanceId:
            type: String
            description: Instance ID where the script needs to be executed.
          DeviceName:
            type: String
            description: EBS Device name where this volume is mounted on.
        mainSteps:
          - name: AttachVolume
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: ec2
              Api: AttachVolume
              VolumeId: '{{ VolumeId }}'
              InstanceId: '{{ InstanceId }}'
              Device: '{{ DeviceName }}'
              nextStep: MountVolume
          - name: MountVolume
            action: aws:executeAwsApi
            onFailure: Abort
            inputs:
              Service: ssm
              Api: SendCommand
              DocumentName: mount_volume
              Parameters:
                DeviceName:
                  - '{{ DeviceName }}'
                InstanceIds:
                  - '{{ InstanceId }}'